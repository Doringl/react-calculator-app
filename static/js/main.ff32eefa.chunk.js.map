{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","getValue","value","setState","input","state","id","process","result","Math","history","clearAll","clearOnce","substring","length","className","Container","Row","Col","xs","Form","Group","controlId","Control","as","rows","placeholder","readOnly","defaultValue","this","type","onKeyPress","event","preventDefault","ButtonGroup","size","aria-label","Button","variant","onClick","document","getElementById","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff32eefa.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  Button,\n  ButtonGroup\n} from 'react-bootstrap';\nimport * as Math from 'mathjs';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      result: '',\n      history: ''\n    };\n  }\n\n  getValue = value => {\n    this.setState({ input: this.state.input + value.id });\n  };\n\n  process = () => {\n    this.setState({ result: Math.evaluate(this.state.input) });\n    this.history();\n  };\n\n  history = () => {\n    this.setState(state => {\n      state.history = state.input + ' = ' + state.result;\n    });\n\n    this.setState({ input: '' });\n    this.setState({ result: '' });\n  };\n\n  clearAll = () => {\n    this.setState({ input: '' });\n    this.setState({ history: '' });\n    this.setState({ result: '' });\n  };\n\n  clearOnce = () => {\n    this.setState({\n      input: this.state.input.substring(0, this.state.input.length - 1)\n    });\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <Container>\n          <Row className='row'>\n            <Col></Col>\n            <Col xs={7}>\n              <Form>\n                <Form.Group controlId='ControlTextarea'>\n                  <Form.Control\n                    as='textarea'\n                    rows='3'\n                    placeholder='History'\n                    readOnly\n                    defaultValue={this.state.history}\n                  />\n                </Form.Group>\n                <Form.Group controlId='ControlInput'>\n                  <Form.Control\n                    type='text'\n                    placeholder={0}\n                    defaultValue={this.state.input}\n                    onKeyPress={event => {\n                      event.preventDefault();\n                    }}\n                  />\n                </Form.Group>\n              </Form>\n              <ButtonGroup\n                size='lg'\n                className='w-100 mb1'\n                aria-label='First group'\n              >\n                <Button variant='dark'></Button>\n                <Button\n                  id='DEL'\n                  variant='dark'\n                  onClick={this.clearAll}\n                  className='op grow'\n                >\n                  DEL\n                </Button>\n                <Button\n                  id='<'\n                  variant='dark'\n                  onClick={this.clearOnce}\n                  className='op grow'\n                >\n                  {'<'}\n                </Button>\n                <Button\n                  id='='\n                  variant='dark'\n                  onClick={this.process}\n                  className='op grow'\n                >\n                  =\n                </Button>\n              </ButtonGroup>\n              <ButtonGroup\n                size='lg'\n                className='w-100 mb1'\n                aria-label='Second group'\n              >\n                <Button\n                  id='7'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('7'))}\n                  className='grow num'\n                >\n                  7\n                </Button>\n                <Button\n                  id='8'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('8'))}\n                  className='grow num'\n                >\n                  8\n                </Button>\n                <Button\n                  id='9'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('9'))}\n                  className='grow num'\n                >\n                  9\n                </Button>\n                <Button\n                  id='+'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('+'))}\n                  className='op grow'\n                >\n                  +\n                </Button>\n              </ButtonGroup>\n              <ButtonGroup\n                size='lg'\n                className='w-100 mb1'\n                aria-label='Third group'\n              >\n                <Button\n                  id='4'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('4'))}\n                  className='grow num'\n                >\n                  4\n                </Button>\n                <Button\n                  id='5'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('5'))}\n                  className='grow num'\n                >\n                  5\n                </Button>\n                <Button\n                  id='6'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('6'))}\n                  className='grow num'\n                >\n                  6\n                </Button>\n                <Button\n                  id='-'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('-'))}\n                  className='op grow'\n                >\n                  -\n                </Button>\n              </ButtonGroup>\n              <ButtonGroup\n                size='lg'\n                className='w-100 mb1'\n                aria-label='Fourth group'\n              >\n                <Button\n                  id='1'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('1'))}\n                  className='grow num'\n                >\n                  1\n                </Button>\n                <Button\n                  id='2'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('2'))}\n                  className='grow num'\n                >\n                  2\n                </Button>\n                <Button\n                  id='3'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('3'))}\n                  className='grow num'\n                >\n                  3\n                </Button>\n                <Button\n                  id='*'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('*'))}\n                  className='op grow'\n                >\n                  x\n                </Button>\n              </ButtonGroup>\n              <ButtonGroup\n                size='lg'\n                className='w-100 mb1'\n                aria-label='Five group'\n              >\n                <Button variant='dark'></Button>\n                <Button\n                  id='0'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('0'))}\n                  className='grow num'\n                >\n                  0\n                </Button>\n                <Button\n                  id='.'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('.'))}\n                  className='grow num'\n                >\n                  .\n                </Button>\n                <Button\n                  id='/'\n                  variant='dark'\n                  onClick={() => this.getValue(document.getElementById('/'))}\n                  className='op grow'\n                >\n                  /\n                </Button>\n              </ButtonGroup>\n            </Col>\n            <Col></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'tachyons';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}